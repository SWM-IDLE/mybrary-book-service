plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.hibernate.orm' version '6.2.2.Final'
	id 'org.graalvm.buildtools.native' version '0.9.20'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'

	id 'com.epages.restdocs-api-spec' version "0.17.1"
	id 'org.hidetake.swagger.generator' version '2.18.2'
	id 'jacoco'
	id "org.sonarqube" version "4.3.1.3277"
}

group = 'kr.mybrary'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2022.0.3")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-config-client'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
	implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

	// spring rest docs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.17.1'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// h2
	runtimeOnly 'com.h2database:h2'

	// resilience4j
	implementation "io.github.resilience4j:resilience4j-spring-boot3"
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'

	delete file('src/main/resources/static/docs/')
	copy {
		from "build/resources/main/static/docs"
		into "src/main/resources/static/docs/"

	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

openapi3 {
	server = "http://localhost:8080"
	title = "[MYBRARY] BOOK SERVICE API 문서"
	description = "Spring REST Docs with SwaggerUI."
	version = "0.0.1"
	outputFileNamePrefix = 'book-service'
	format = 'json'

	outputDirectory = 'build/resources/main/static/docs'
}

clean {
	delete file('src/main/generated')
}

sonar {
	properties {
		property "sonar.projectKey", "SWM-IDLE_mybrary-book-service"
		property "sonar.organization", "swm-idle-sonarqube-key"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}

jacoco {
	toolVersion = "0.8.8"
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.enabled true
		html.enabled true
	}
	finalizedBy 'jacocoTestCoverageVerification'
}